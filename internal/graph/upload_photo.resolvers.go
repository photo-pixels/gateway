package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"github.com/photo-pixels/gateway/internal/auth"

	"github.com/photo-pixels/gateway/internal/graph/model"
	api "github.com/photo-pixels/gateway/pkg/gen/photo"
)

// UploadPhoto is the resolver for the upload_photo field.
func (r *mutationResolver) UploadPhoto(ctx context.Context, input model.UploadPhotoInput) (*api.UploadPhotoResponse, error) {
	session := r.AuthService.GetTokenSession(ctx)
	if session == nil || session.TokenType != auth.UploadPhotoTokenType {
		return nil, model.ErrorNoAuth
	}

	response, err := r.GetSyncPhotosClient().UploadPhoto(ctx, &api.UploadPhotoRequest{
		UserId:         session.UserID.String(),
		Paths:          input.Paths,
		Hash:           input.Hash,
		Body:           []byte(input.Body),
		PhotoUpdatedAt: input.PhotoUpdatedAt,
		ClientInfo:     input.ClientInfo,
	})

	if err != nil {
		return nil, fmt.Errorf("GetSyncPhotosClient().UploadPhoto: %w", err)
	}

	return response, nil
}
