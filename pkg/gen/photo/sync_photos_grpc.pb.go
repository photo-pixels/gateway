// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: photo/sync_photos.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SyncPhotosService_UploadPhoto_FullMethodName = "/photo.SyncPhotosService/UploadPhoto"
)

// SyncPhotosServiceClient is the client API for SyncPhotosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncPhotosServiceClient interface {
	UploadPhoto(ctx context.Context, in *UploadPhotoRequest, opts ...grpc.CallOption) (*UploadPhotoResponse, error)
}

type syncPhotosServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncPhotosServiceClient(cc grpc.ClientConnInterface) SyncPhotosServiceClient {
	return &syncPhotosServiceClient{cc}
}

func (c *syncPhotosServiceClient) UploadPhoto(ctx context.Context, in *UploadPhotoRequest, opts ...grpc.CallOption) (*UploadPhotoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadPhotoResponse)
	err := c.cc.Invoke(ctx, SyncPhotosService_UploadPhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncPhotosServiceServer is the server API for SyncPhotosService service.
// All implementations must embed UnimplementedSyncPhotosServiceServer
// for forward compatibility
type SyncPhotosServiceServer interface {
	UploadPhoto(context.Context, *UploadPhotoRequest) (*UploadPhotoResponse, error)
	mustEmbedUnimplementedSyncPhotosServiceServer()
}

// UnimplementedSyncPhotosServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSyncPhotosServiceServer struct {
}

func (UnimplementedSyncPhotosServiceServer) UploadPhoto(context.Context, *UploadPhotoRequest) (*UploadPhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPhoto not implemented")
}
func (UnimplementedSyncPhotosServiceServer) mustEmbedUnimplementedSyncPhotosServiceServer() {}

// UnsafeSyncPhotosServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncPhotosServiceServer will
// result in compilation errors.
type UnsafeSyncPhotosServiceServer interface {
	mustEmbedUnimplementedSyncPhotosServiceServer()
}

func RegisterSyncPhotosServiceServer(s grpc.ServiceRegistrar, srv SyncPhotosServiceServer) {
	s.RegisterService(&SyncPhotosService_ServiceDesc, srv)
}

func _SyncPhotosService_UploadPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncPhotosServiceServer).UploadPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncPhotosService_UploadPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncPhotosServiceServer).UploadPhoto(ctx, req.(*UploadPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SyncPhotosService_ServiceDesc is the grpc.ServiceDesc for SyncPhotosService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncPhotosService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "photo.SyncPhotosService",
	HandlerType: (*SyncPhotosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadPhoto",
			Handler:    _SyncPhotosService_UploadPhoto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "photo/sync_photos.proto",
}
